name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run go fmt
        run: |
          fmtres=$(go fmt ./...)
          if [ -n "$fmtres" ]; then
            echo "Code is not formatted. Run 'go fmt ./...' locally." && exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        run: golangci-lint run ./... --timeout=5m

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: 54.243.82.154
          USER: ubuntu
        run: |
          # Create SSH key file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Create deployment script
          cat > deploy-ec2.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment on EC2..."

          # Navigate to app directory
          cd /home/ubuntu/consistency || { echo "App directory not found"; exit 1; }

          # Pull latest code
          echo "📥 Pulling latest code..."
          git pull origin main || { echo "Git pull failed"; exit 1; }

          # Stop existing container
          echo "🛑 Stopping existing container..."
          sudo docker stop consistency-api || echo "No container to stop"
          sudo docker rm consistency-api || echo "No container to remove"

          # Build new image
          echo "🔨 Building new Docker image..."
          sudo docker build -t consistency-api:latest . || { echo "Docker build failed"; exit 1; }

          # Start new container
          echo "🚀 Starting new container..."
          sudo docker run -d \
            -p 8080:8080 \
            -e DATABASE_URL="postgres://postgres:yourpassword@consistency-db.c9vfqd1qtcgd.us-east-1.rds.amazonaws.com:5432/consistency_db?sslmode=disable" \
            -e PORT=8080 \
            -e GIN_MODE=release \
            --restart unless-stopped \
            --name consistency-api \
            consistency-api:latest || { echo "Container start failed"; exit 1; }

          # Wait for health check
          echo "⏳ Waiting for application to start..."
          sleep 10

          # Test the application
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "✅ Deployment successful! Application is healthy."
          else
            echo "❌ Deployment failed! Application is not responding."
            exit 1
          fi
          EOF

          # Copy deployment script to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy-ec2.sh $USER@$HOST:/home/$USER/deploy-ec2.sh

          # Execute deployment on EC2
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            chmod +x /home/$USER/deploy-ec2.sh
            /home/$USER/deploy-ec2.sh
          "

          # Cleanup
          rm -f private_key.pem

      - name: Deployment summary
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🚀 Environment: production"
          echo "🌐 Application URL: https://54.243.82.154/health"
          echo "📱 React Native API: http://54.243.82.154:8080"
          echo "🔗 HTTPS URL: https://api.consistency-staging.shubhams.dev/health"
