name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: consistency-service

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run go fmt
        run: |
          fmtres=$(go fmt ./...)
          if [ -n "$fmtres" ]; then
            echo "Code is not formatted. Run 'go fmt ./...' locally." && exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        run: golangci-lint run ./... --timeout=5m

  build-and-deploy:
    # needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create docker-compose.yml for EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat > docker-compose.production.yml << EOF
          version: '3.8'

          services:
            app:
              image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              container_name: consistency-api
              ports:
                - "80:8080"
              environment:
                - ENV=production
                - LOG_LEVEL=info
                - LOG_PRETTY=false
                - DB_HOST=consistency-prod-db.cs5c86m8c7jh.us-east-1.rds.amazonaws.com
                - DB_PORT=5432
                - DB_NAME=consistency_service
                - DB_USER=postgres
                - DB_PASSWORD=consistency1july
                - DB_SSL_MODE=require
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "üöÄ Starting deployment..."

          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Pull latest image
          docker-compose -f docker-compose.production.yml pull

          # Stop and remove old containers
          docker-compose -f docker-compose.production.yml down

          # Start new containers
          docker-compose -f docker-compose.production.yml up -d

          # Check if deployment was successful
          echo "‚è≥ Waiting for application to start..."
          sleep 30

          # Health check
          if curl -f http://localhost/health > /dev/null 2>&1; then
            echo "‚úÖ Deployment successful! Application is healthy."
          else
            echo "‚ùå Deployment failed! Application is not responding."
            docker-compose -f docker-compose.production.yml logs
            exit 1
          fi

          # Cleanup old images
          docker image prune -f

          echo "üéâ Deployment completed successfully!"
          EOF

          chmod +x deploy.sh

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          # Create SSH key file
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Copy files to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.production.yml $USER@$HOST:/home/$USER/
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh $USER@$HOST:/home/$USER/

          # Execute deployment on EC2
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            export ECR_REGISTRY=$ECR_REGISTRY
            cd /home/$USER
            ./deploy.sh
          "

          # Cleanup
          rm -f private_key.pem

      - name: Deployment summary
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üöÄ Environment: production"
          echo "üè∑Ô∏è  Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "üîó EC2 Host: ${{ secrets.EC2_HOST }}"
          echo "üåê Application should be available at: http://${{ secrets.EC2_HOST }}"
