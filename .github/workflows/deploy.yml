name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
      - staging

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.2"
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      - name: Run go fmt
        run: |
          fmtres=$(go fmt ./...)
          if [ -n "$fmtres" ]; then
            echo "Code is not formatted. Run 'go fmt ./...' locally." && exit 1
          fi
      - name: Run go vet
        run: go vet ./...
      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  deploy:
    needs: lint
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: consistency-service
      ECS_CLUSTER: consistency-cluster
      ECS_SERVICE: ${{ github.ref == 'refs/heads/main' && 'consistency-prod' || 'consistency-staging' }}
      CONTAINER_NAME: app

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Fill in the new image ID in the ECS task definition
        run: |
          sed "s|<IMAGE_URI>|${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}|g" ecs-task-def.json > ecs-task-def-filled.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def-filled.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
